stages:
  - lint
  - security
  - test
  - build
  - post-pipeline
  - deploy

variables:
  TRIVY_SEVERITY: "CRITICAL,HIGH"
  TRIVY_EXIT_CODE: "1"

staticcheck:
  stage: lint
  image: golang:1.24-alpine3.22
  script:
    - apk add --no-cache git
    - go env -w GOPRIVATE="10.1.20.130/*"
    - go env -w GOINSECURE="10.1.20.130/*"
    - git config --global url."http://$DROPPING_READ_TOKEN@10.1.20.130/".insteadOf "https://10.1.20.130/"
    - go install honnef.co/go/tools/cmd/staticcheck@latest
    - staticcheck ./...

golangci-lint:
  stage: lint
  image: golangci/golangci-lint:v2.3-alpine-amd64
  before_script:
    - apk add --no-cache git
    - go env -w GOPRIVATE="10.1.20.130/*"
    - go env -w GOINSECURE="10.1.20.130/*"
    - git config --global url."http://$DROPPING_READ_TOKEN@10.1.20.130/".insteadOf "https://10.1.20.130/"
  script:
    - golangci-lint run --timeout=5m

sast:
  stage: security
  image: golang:1.24-alpine3.22
  before_script:
    - apk add --no-cache git
    - go env -w GOPRIVATE="10.1.20.130/*"
    - go env -w GOINSECURE="10.1.20.130/*"
    - go install github.com/securego/gosec/v2/cmd/gosec@latest
    - go mod download
  script:
    - $GOPATH/bin/gosec -severity=medium -fmt=json -out=gosec-report.json ./...
    - |
      if grep -q '"severity":"MEDIUM"\|"severity":"HIGH"' gosec-report.json; then
        echo "Medium or higher severity issues found!"
        exit 1
      fi
  allow_failure: false

trivy_scan_code:
  stage: security
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - echo "üîç Scanning source code & configs..."
    - trivy fs --exit-code $TRIVY_EXIT_CODE --severity $TRIVY_SEVERITY .

build_test_image:
  stage: test
  image: golang:1.24-alpine3.22
  before_script:
    - apk add --no-cache docker git
    - go env -w GOPRIVATE="10.1.20.130/*"
    - go env -w GOINSECURE="10.1.20.130/*"
    - git config --global url."http://$DROPPING_READ_TOKEN@10.1.20.130/".insteadOf "https://10.1.20.130/"
  script:
    - chmod +x ./bin/build-test-image.sh
    - ./bin/build-test-image.sh

go_test:
  stage: test
  image: golang:1.24-alpine3.22
  before_script:
    - apk add --no-cache git docker
    - go env -w GOPRIVATE="10.1.20.130/*"
    - go env -w GOINSECURE="10.1.20.130/*"
    - git config --global url."http://$DROPPING_READ_TOKEN@10.1.20.130/".insteadOf "https://10.1.20.130/"
  script:
    - echo "Running go test (unit testing)..."
    - go test ./test/ut/... -v || (echo "[FAIL] Unit testing failed." && exit 1)
    - echo "Running go test (integration testing)..."
    - go test ./test/it/... -v || (echo "[FAIL] Integration testing failed." && exit 1)
  after_script:
    - chmod +x ./bin/clean-test-image.sh
    - ./bin/clean-test-image.sh
    - echo "other services image..."
    - docker rmi 10.1.20.130:5001/dropping/auth-service:latest
    - docker rmi 10.1.20.130:5001/dropping/file-service:latest
    - docker rmi 10.1.20.130:5001/dropping/notification-service:latest

image_build:
  stage: build
  image: golang:1.24-alpine3.22
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  before_script:
    - apk add --no-cache docker git
    - go env -w GOPRIVATE="10.1.20.130/*"
    - go env -w GOINSECURE="10.1.20.130/*"
    - git config --global url."http://$DROPPING_READ_TOKEN@10.1.20.130/".insteadOf "https://10.1.20.130/"
  script:
    - chmod +x ./bin/build.sh
    - ./bin/build.sh

trivy_scan_image:
  stage: post-pipeline
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  allow_failure: true
  before_script:
    - apk add --no-cache docker
  script:
    - VERSION=$(cat VERSION)
    - echo "üîç Logging in to GitLab container registry..."
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin "$CI_REGISTRY"
    - echo "üîç Pulling image for scanning..."
    - docker pull "$CI_REGISTRY_IMAGE:$VERSION"
    - echo "üîç Scanning pushed Docker image..."
    - trivy image --exit-code $TRIVY_EXIT_CODE --severity $TRIVY_SEVERITY "$CI_REGISTRY_IMAGE:$VERSION"

update_version:
  stage: post-pipeline
  image: alpine:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  before_script:
    - apk add --no-cache git yq
  script:
    - VERSION=$(cat VERSION)
    - git clone http://$DROPPING_VERSIONING_TOKEN@10.1.20.130/dropping/versioning.git/
    - cd versioning
    - yq e '.["user_service_version"] = "'$VERSION'"' -i version.yaml
    - git config user.email "ci@local"
    - git config user.name "CI Bot"
    - git add version.yaml
    - git diff --cached --quiet || git commit -m "Update auth_service_version to $VERSION"
    - git push http://$CI_PROJECT_ROOT_NAMESPACE:$DROPPING_VERSIONING_TOKEN@10.1.20.130/dropping/versioning.git HEAD:main

deployment:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  trigger:
    project: "$CI_PROJECT_NAMESPACE/deployment"
    branch: main
    strategy: depend
