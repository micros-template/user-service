{
    "swagger": "2.0",
    "info": {
        "description": "User service API for operation related to user",
        "title": "User Service API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8081",
    "basePath": "/api/v1/user",
    "paths": {
        "/": {
            "delete": {
                "description": "Delete User based on its ID (from token)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Service"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Body Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete User Success",
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteUserSuccessExample"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input, password and confirm_password doesn't match",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInvalidInputExample"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - token invalid, wrong password",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUnauthorizedErrorExample"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUserNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update User based on its ID (from token)",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Service"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Profile image",
                        "name": "image",
                        "in": "formData"
                    },
                    {
                        "maxLength": 100,
                        "minLength": 1,
                        "type": "string",
                        "example": "john doe",
                        "name": "full_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "name": "two_factor_enabled",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update user Success",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserSuccessExample"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input, wrong image extension, and limit image exceeded",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInvalidInputExample"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUnauthorizedErrorExample"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUserNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        },
        "/email": {
            "patch": {
                "description": "Change Email based on its ID (from token)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Service"
                ],
                "summary": "Change Email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Body Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Change Email Success - need verification in auth API",
                        "schema": {
                            "$ref": "#/definitions/dto.ChangeEmailSuccessExample"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInvalidInputExample"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUnauthorizedErrorExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "description": "Get profile User based on its ID (from token)",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Service"
                ],
                "summary": "Get User Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get Profile Success",
                        "schema": {
                            "$ref": "#/definitions/dto.GetProfileSuccessExample"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUnauthorizedErrorExample"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUserNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        },
        "/password": {
            "patch": {
                "description": "Change Password based on its ID (from token)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User-Service"
                ],
                "summary": "Change Password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Body Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Change Password Success",
                        "schema": {
                            "$ref": "#/definitions/dto.ChangePasswordSuccessExample"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input, password and confirm_password doesn't match",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInvalidInputExample"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - token invalid, wrong password",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUnauthorizedErrorExample"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalUserNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GlobalInternalServerErrorExample"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ChangeEmailSuccessExample": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "null"
                },
                "message": {
                    "type": "string",
                    "example": "verify to change email"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.ChangePasswordSuccessExample": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "null"
                },
                "message": {
                    "type": "string",
                    "example": "success delete user"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.DeleteUserRequest": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "dto.DeleteUserSuccessExample": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "null"
                },
                "message": {
                    "type": "string",
                    "example": "success delete user"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.GetProfileResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "full_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "two_factor_enabled": {
                    "type": "boolean",
                    "example": false
                },
                "verified": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "dto.GetProfileSuccessExample": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.GetProfileResponse"
                },
                "message": {
                    "type": "string",
                    "example": "success get profile data"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.GlobalInternalServerErrorExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "internal server error"
                },
                "status_code": {
                    "type": "integer",
                    "example": 500
                }
            }
        },
        "dto.GlobalInvalidInputExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "invalid input"
                },
                "status_code": {
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "dto.GlobalUnauthorizedErrorExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "unauthorized"
                },
                "status_code": {
                    "type": "integer",
                    "example": 401
                }
            }
        },
        "dto.GlobalUserNotFoundExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "user not found"
                },
                "status_code": {
                    "type": "integer",
                    "example": 404
                }
            }
        },
        "dto.UpdateEmailRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.UpdatePasswordRequest": {
            "type": "object",
            "required": [
                "confirm_new_password",
                "new_password",
                "password"
            ],
            "properties": {
                "confirm_new_password": {
                    "type": "string",
                    "minLength": 6
                },
                "new_password": {
                    "type": "string",
                    "minLength": 6
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "dto.UpdateUserSuccessExample": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "null"
                },
                "message": {
                    "type": "string",
                    "example": "success update profile data"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}