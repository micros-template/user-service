# Map for WebSocket connection upgrades
map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

server {
  listen 80;
  http2 on;
  server_name nginx-proxy;

  client_max_body_size 10m;

  location /nginx_status {
    stub_status;
    allow all;
  }


  location /grafana/ {
    proxy_pass http://grafana:3000/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # WebSocket support for Grafana live features
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_cache_bypass $http_upgrade;
  }

  location /auth_middleware {
    internal;
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    proxy_method POST;
    proxy_set_header Authorization $http_authorization;
    proxy_pass http://test_auth_service/verify;
  }

  location /api/v1/auth/ {
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Headers * always;
      add_header Access-Control-Allow-Methods * always;
      return 204;
    }
    proxy_pass http://test_auth_service:8081/;
  }

  location /api/v1/image/ {
    proxy_pass http://test_minio:9000/;
  }


  location /api/ {
    auth_request /auth_middleware;

    auth_request_set $backend_status $upstream_status;
    auth_request_set $user_data $sent_http_user_data;
    proxy_set_header User-Data $user_data;

    # handle websocket connetion to notification
    location /api/v1/notification/ {
      proxy_pass http://test_nats:8080/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /api/v1/user/ {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Headers * always;
        add_header Access-Control-Allow-Methods * always;
        return 204;
      }
      proxy_pass http://test_user_service:8081/;
    }

    location /api/v1/file/ {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Headers * always;
        add_header Access-Control-Allow-Methods * always;
        return 204;
      }
      proxy_pass http://test_file_service/;
    }
  }
  # location / {
  #   proxy_pass http://frontend/;
  # }
}

server {
  listen 50051 http2;
  server_name grpc-gateway;

  location / {
    client_max_body_size 10M;

    location /upb.UserService/ {
      grpc_pass grpc://test_user_service:50051;
    }

    location /fpb.FileService/ {
      grpc_pass grpc://test_file_service:50051;
    }
  }

  include /etc/nginx/conf.d/errors.grpc_conf;
}